{
  "version": 3,
  "file": "fetch.js",
  "sourceRoot": "..\\..",
  "sources": [
    "src\\components\\fetch.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA,MAAM,CAAC,OAAP,GAAiB,QAAA,CAAC,GAAD,CAAA;IACf,GAAG,CAAC,SAAJ,GAAgB;IAChB,GAAG,CAAC,UAAJ,GAAiB;WACjB;MAAA,MAAA,EAAQ,QAAA,CAAC,OAAD,CAAA;eACN,IAAI,OAAJ,CAAY,MAAA,QAAA,CAAC,OAAD,EAAU,MAAV,CAAA;AAChB,cAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,WAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,WAAA,EAAA,QAAA,EAAA;AAAM;AACE;YAAA,KAAA,qCAAA;;cAAA,MAAM,EAAA,CAAG,OAAH;YAAN;YACA,IAAG,OAAO,CAAC,SAAX;AACE;cAAA,KAAA,wCAAA;;gBAAA,MAAM,EAAA,CAAG,OAAH;cAAN,CADF;aAFF;WAIA,aAAA;YAAM;AACJ,mBAAO,MAAA,CAAO,CAAP,EADT;;UAEA,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAR,IAAkB;UACnC,GAAA,GAAM,IAAI,cAAJ,CAAA;UACN,IAAG,OAAO,CAAC,OAAX;AACE;YAAA,KAAA,WAAA;;cAAA,GAAG,CAAC,gBAAJ,CAAqB,GAArB,EAA0B,KAA1B;YAAA,CADF;;UAEA,GAAG,CAAC,gBAAJ,CAAqB,cAArB,EAAqC,kCAArC;UACA,IAAG,WAAA,GAAc,GAAG,CAAC,WAAJ,CAAgB,OAAhB,CAAjB;YACE,IAAG,QAAA,GAAW,CAAA,MAAM,WAAW,CAAC,YAAZ,CAAyB,GAAzB,CAAN,CAAd;AACE,qBAAO,WAAA,CAAY,QAAZ,EADT;aADF;;UAGA,WAAA,GAAc,MAAA,QAAA,CAAC,QAAD,CAAA;AACpB,gBAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;AAAQ;AACE;cAAA,KAAA,wCAAA;;gBAAA,MAAM,EAAA,CAAG,QAAH;cAAN;cACA,IAAG,OAAO,CAAC,UAAX;AACE;gBAAA,KAAA,wCAAA;;kBAAA,MAAM,EAAA,CAAG,QAAH;gBAAN,CADF;eAFF;aAIA,aAAA;cAAM;AACJ,qBAAO,MAAA,CAAO,CAAP,EADT;;mBAEA,OAAA,CAAQ,QAAR;UAPY;UAQd,GAAG,CAAC,IAAJ,CAAS,OAAO,CAAC,GAAjB,EAAsB,OAAO,CAAC,MAA9B,EAAsC,IAAtC;UACA,GAAG,CAAC,kBAAJ,GAAyB,QAAA,CAAA,CAAA;YACvB,IAAiB,IAAC,CAAC,UAAF,KAAgB,CAAjC;qBAAA,WAAA,CAAY,IAAZ,EAAA;;UADuB;iBAGzB,GAAG,CAAC,IAAJ,CAAS,OAAO,CAAC,IAAjB;QA3BU,CAAZ;MADM;IAAR;EAHe;AAAjB",
  "sourcesContent": [
    "module.exports = (app) ->\r\n  app.$preFetch = []\r\n  app.$postFetch = []\r\n  $fetch: (options) ->\r\n    new Promise (resolve, reject) ->\r\n      try\r\n        await fn options for fn in app.$preFetch\r\n        if options.$preFetch\r\n          await fn options for fn in options.$preFetch\r\n      catch e\r\n        return reject e\r\n      options.method = options.method or 'GET'\r\n      req = new XMLHttpRequest()\r\n      if options.headers\r\n        req.setRequestHeader key, value for key, value of options.headers\r\n      req.setRequestHeader 'Content-Type', 'application/x-www-form-urlencode'\r\n      if mockService = app.$getSerivce('mocks')\r\n        if response = await mockService.$getResponse req\r\n          return resolveData response\r\n      resolveData = (response) ->\r\n        try\r\n          await fn response for fn in app.$postFetch\r\n          if options.$postFetch\r\n            await fn response for fn in options.$postFetch\r\n        catch e\r\n          return reject e\r\n        resolve response\r\n      req.open options.url, options.method, true\r\n      req.onreadystatechange = ->\r\n        resolveData @ if @.readyState is 4\r\n\r\n      req.send options.data\r\n"
  ]
}